import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.DtB2lZXX.js";const E=JSON.parse('{"title":"PostgreSQL JDBC バインドで発生する「2バイト整数の範囲超え」エラーとは？","description":"Fixing “Tried to send an out-of-range integer as a 2-byte value” in PostgreSQL JDBC","frontmatter":{"title":"PostgreSQL JDBC バインドで発生する「2バイト整数の範囲超え」エラーとは？","date":"2025-04-30","tags":["JDBC","バインド","PostgreSQL","範囲超え"],"description":"Fixing “Tried to send an out-of-range integer as a 2-byte value” in PostgreSQL JDBC"},"headers":[],"relativePath":"20250430-postgresql-jdbc-2byte-limit-blog.md","filePath":"20250430-postgresql-jdbc-2byte-limit-blog.md"}'),n={name:"20250430-postgresql-jdbc-2byte-limit-blog.md"};function h(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="🚨-postgresql-jdbc-バインドで発生する「2バイト整数の範囲超え」エラーとは" tabindex="-1">🚨 PostgreSQL JDBC バインドで発生する「2バイト整数の範囲超え」エラーとは？ <a class="header-anchor" href="#🚨-postgresql-jdbc-バインドで発生する「2バイト整数の範囲超え」エラーとは" aria-label="Permalink to &quot;🚨 PostgreSQL JDBC バインドで発生する「2バイト整数の範囲超え」エラーとは？&quot;">​</a></h1><h2 id="🚨-fixing-tried-to-send-an-out-of-range-integer-as-a-2-byte-value-in-postgresql-jdbc" tabindex="-1">🚨 Fixing “Tried to send an out-of-range integer as a 2-byte value” in PostgreSQL JDBC <a class="header-anchor" href="#🚨-fixing-tried-to-send-an-out-of-range-integer-as-a-2-byte-value-in-postgresql-jdbc" aria-label="Permalink to &quot;🚨 Fixing “Tried to send an out-of-range integer as a 2-byte value” in PostgreSQL JDBC&quot;">​</a></h2><hr><h2 id="📝-はじめに-introduction" tabindex="-1">📝 はじめに / Introduction <a class="header-anchor" href="#📝-はじめに-introduction" aria-label="Permalink to &quot;📝 はじめに / Introduction&quot;">​</a></h2><p><strong>日本語：</strong><br> 先日、PostgreSQL で大量の ID を使って <code>IN</code> クエリを実行したところ、JDBC 経由で次のような例外が発生しました：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java.io.IOException: Tried to send an out-of-range integer as a 2-byte value: 66112</span></span></code></pre></div><p>一見 PostgreSQL の問題に見えますが、実際には <strong>JDBC ドライバの制約</strong>に起因するものでした。この記事ではその原因と対処法を紹介します。</p><p><strong>English:</strong><br> Recently, while running a large <code>IN</code> query using PostgreSQL, I encountered the following exception through JDBC:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java.io.IOException: Tried to send an out-of-range integer as a 2-byte value: 66112</span></span></code></pre></div><p>At first glance, it appeared to be a PostgreSQL issue, but it turned out to be a <strong>limitation in the JDBC driver</strong>. In this article, I’ll explain the cause and how to solve it.</p><hr><h2 id="🧩-エラーの概要-error-overview" tabindex="-1">🧩 エラーの概要 / Error Overview <a class="header-anchor" href="#🧩-エラーの概要-error-overview" aria-label="Permalink to &quot;🧩 エラーの概要 / Error Overview&quot;">​</a></h2><p><strong>日本語：</strong><br> Java の JDBC を使って PostgreSQL に大量のデータを送信する際、次のようなエラーが発生することがあります：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java.io.IOException: Tried to send an out-of-range integer as a 2-byte value: 66112</span></span></code></pre></div><p><strong>English:</strong><br> When using Java JDBC with PostgreSQL to insert or batch large volumes of data, the following error may occur:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java.io.IOException: Tried to send an out-of-range integer as a 2-byte value: 66112</span></span></code></pre></div><hr><h2 id="🎯-原因-root-cause" tabindex="-1">🎯 原因 / Root Cause <a class="header-anchor" href="#🎯-原因-root-cause" aria-label="Permalink to &quot;🎯 原因 / Root Cause&quot;">​</a></h2><p><strong>PostgreSQL のフロントエンド通信プロトコルでは、</strong></p><ul><li>一部のデータ（バインド変数の数、カラム数、バッチ数など）を <strong>2 バイト整数（最大 32,767 または 65,535）</strong> として扱います。</li></ul><p><strong>JDBC ドライバもこの制限に従うため、</strong></p><ul><li>バインド数や <code>addBatch()</code> の回数が制限を超えると、この例外が発生します。</li></ul><p>In PostgreSQL&#39;s wire protocol, certain fields like the number of parameters or batch statements are represented using <strong>2-byte integers (max 32,767 or 65,535)</strong>.<br> When you exceed that using JDBC, this error is triggered.</p><hr><h2 id="🧨-発生しやすいケース-common-scenarios" tabindex="-1">🧨 発生しやすいケース / Common Scenarios <a class="header-anchor" href="#🧨-発生しやすいケース-common-scenarios" aria-label="Permalink to &quot;🧨 発生しやすいケース / Common Scenarios&quot;">​</a></h2><table tabindex="0"><thead><tr><th>ケース</th><th>詳細</th></tr></thead><tbody><tr><td>大量のバッチ挿入</td><td>例：66,112 件を一括で <code>addBatch()</code></td></tr><tr><td>長大な IN クエリ</td><td>例：<code>WHERE id IN (?, ?, ..., ?)</code> に 66,000 件のID</td></tr><tr><td>1件あたりのカラム数が多い</td><td>100列以上 × 数千件 ＝ 数万バインド</td></tr></tbody></table><hr><h2 id="🛠-解決策-solutions" tabindex="-1">🛠 解決策 / Solutions <a class="header-anchor" href="#🛠-解決策-solutions" aria-label="Permalink to &quot;🛠 解決策 / Solutions&quot;">​</a></h2><h3 id="✅-1-バッチサイズを減らす-reduce-batch-size" tabindex="-1">✅ 1. バッチサイズを減らす / Reduce Batch Size <a class="header-anchor" href="#✅-1-バッチサイズを減らす-reduce-batch-size" aria-label="Permalink to &quot;✅ 1. バッチサイズを減らす / Reduce Batch Size&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BATCH_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Item item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BATCH_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Execute every 1000 items</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Final batch</span></span></code></pre></div><ul><li>JDBC のバッチは安全のため、<strong>1バッチあたり最大1万～2万件以内</strong>に制限するのがベストです。</li></ul><hr><h3 id="✅-2-in-句の分割-split-large-in-clauses" tabindex="-1">✅ 2. IN 句の分割 / Split Large IN Clauses <a class="header-anchor" href="#✅-2-in-句の分割-split-large-in-clauses" aria-label="Permalink to &quot;✅ 2. IN 句の分割 / Split Large IN Clauses&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; ids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 60000+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; sublist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ids, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String placeholders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sublist.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String sql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SELECT * FROM users WHERE id IN (&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> placeholders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PreparedStatement ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sql);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sublist.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sublist.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="✅-3-配列型や-json-型の活用-use-postgresql-arrays-or-json" tabindex="-1">✅ 3. 配列型や JSON 型の活用 / Use PostgreSQL Arrays or JSON <a class="header-anchor" href="#✅-3-配列型や-json-型の活用-use-postgresql-arrays-or-json" aria-label="Permalink to &quot;✅ 3. 配列型や JSON 型の活用 / Use PostgreSQL Arrays or JSON&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- PostgreSQL 側のクエリ</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ANY(?)</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INTEGER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span></code></pre></div><p>これにより、1つのバインド変数で複数の値を送れる。</p><hr><h2 id="✅-まとめ-summary" tabindex="-1">✅ まとめ / Summary <a class="header-anchor" href="#✅-まとめ-summary" aria-label="Permalink to &quot;✅ まとめ / Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>項目</th><th>限界</th><th>対応策</th></tr></thead><tbody><tr><td><code>addBatch()</code> の回数</td><td>~32,767</td><td>バッチ分割</td></tr><tr><td>プレースホルダの総数</td><td>~65,535</td><td>IN句の分割、JSON活用</td></tr><tr><td>バインドできる整数</td><td>short（2バイト）まで</td><td>分割処理で回避</td></tr></tbody></table><hr><h2 id="💬-技術英語フレーズ-technical-english-phrases" tabindex="-1">💬 技術英語フレーズ / Technical English Phrases <a class="header-anchor" href="#💬-技術英語フレーズ-technical-english-phrases" aria-label="Permalink to &quot;💬 技術英語フレーズ / Technical English Phrases&quot;">​</a></h2><ul><li>&quot;We encountered a JDBC limit when batching over 65,000 parameters.&quot;</li><li>&quot;PostgreSQL protocol uses 2-byte integers for some metadata fields.&quot;</li><li>&quot;Avoid sending large <code>IN</code> clauses in a single query; split them instead.&quot;</li></ul>`,45)]))}const g=i(n,[["render",h]]);export{E as __pageData,g as default};

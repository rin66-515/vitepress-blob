import{_ as e,c as t,o,ae as l}from"./chunks/framework.DtB2lZXX.js";const f=JSON.parse('{"title":"Next.jsでMarkdownブログを実装｜動的ルーティングとfallbackの理解","description":"","frontmatter":{"title":"Next.jsでMarkdownブログを実装｜動的ルーティングとfallbackの理解","date":"2025-05-01"},"headers":[],"relativePath":"20250501-nextjs-blog-fallback.md","filePath":"20250501-nextjs-blog-fallback.md"}'),d={name:"20250501-nextjs-blog-fallback.md"};function c(i,a,n,r,s,m){return o(),t("div",null,a[0]||(a[0]=[l('<h1 id="🇯🇵-next-jsでmarkdownブログを実装-動的ルーティングとfallbackの理解" tabindex="-1">🇯🇵 Next.jsでMarkdownブログを実装｜動的ルーティングとfallbackの理解 <a class="header-anchor" href="#🇯🇵-next-jsでmarkdownブログを実装-動的ルーティングとfallbackの理解" aria-label="Permalink to &quot;🇯🇵 Next.jsでMarkdownブログを実装｜動的ルーティングとfallbackの理解&quot;">​</a></h1><p>今日は、Next.jsとTypeScriptを使って、Markdownファイルをベースにしたブログページの実装を進めました。動的ルーティングと<code>getStaticProps</code>, <code>getStaticPaths</code>の連携、<code>fallback: false</code>の使い方を学びました。</p><h2 id="✅-実装したこと" tabindex="-1">✅ 実装したこと <a class="header-anchor" href="#✅-実装したこと" aria-label="Permalink to &quot;✅ 実装したこと&quot;">​</a></h2><ul><li><code>/posts/[id].tsx</code>の動的ルーティングページを作成</li><li><code>posts/</code>フォルダ内の<code>.md</code>ファイルを読み込み、静的HTMLに変換</li><li><code>gray-matter</code>でフロントマターを解析、<code>remark</code>でMarkdownをHTMLに変換</li><li><code>getStaticPaths()</code>で全てのパスを取得</li><li><code>fallback: false</code>にすることで、指定されていないパスは404を返すよう設定</li></ul><h2 id="🤔-fallback-falseとは" tabindex="-1">🤔 fallback: falseとは？ <a class="header-anchor" href="#🤔-fallback-falseとは" aria-label="Permalink to &quot;🤔 fallback: falseとは？&quot;">​</a></h2><p><code>fallback: false</code>にすることで、あらかじめ<code>getStaticPaths()</code>で指定されたページしか生成されません。それ以外のパスにアクセスすると404になります。これは、ブログ記事のように、数が決まっていてビルド時に全部生成できる場面で非常に便利です。</p><hr><h1 id="🇺🇸-implementing-a-markdown-blog-with-next-js-—-dynamic-routing-fallback-false" tabindex="-1">🇺🇸 Implementing a Markdown Blog with Next.js — Dynamic Routing &amp; <code>fallback: false</code> <a class="header-anchor" href="#🇺🇸-implementing-a-markdown-blog-with-next-js-—-dynamic-routing-fallback-false" aria-label="Permalink to &quot;🇺🇸 Implementing a Markdown Blog with Next.js — Dynamic Routing &amp; `fallback: false`&quot;">​</a></h1><p>Today, I worked on building a Markdown-based blog system using Next.js and TypeScript. I implemented dynamic routing using <code>[id].tsx</code> and learned how to use <code>getStaticPaths</code>, <code>getStaticProps</code>, and the meaning of <code>fallback: false</code>.</p><h2 id="✅-what-i-implemented" tabindex="-1">✅ What I implemented <a class="header-anchor" href="#✅-what-i-implemented" aria-label="Permalink to &quot;✅ What I implemented&quot;">​</a></h2><ul><li>Created a dynamic route page at <code>/posts/[id].tsx</code></li><li>Loaded <code>.md</code> files from the <code>/posts/</code> directory and converted them to HTML</li><li>Used <code>gray-matter</code> to parse frontmatter and <code>remark</code> to convert Markdown to HTML</li><li>Used <code>getStaticPaths()</code> to list all post paths at build time</li><li>Set <code>fallback: false</code> so that only predefined paths are allowed, and all others return 404</li></ul><h2 id="🤔-what-does-fallback-false-mean" tabindex="-1">🤔 What does <code>fallback: false</code> mean? <a class="header-anchor" href="#🤔-what-does-fallback-false-mean" aria-label="Permalink to &quot;🤔 What does `fallback: false` mean?&quot;">​</a></h2><p>By setting <code>fallback: false</code>, only the pages returned by <code>getStaticPaths()</code> are generated. Any other path will return a 404 page. This approach is ideal for blog projects where all content is static and known at build time.</p><hr><h2 id="✍️-学びのまとめ-summary" tabindex="-1">✍️ 学びのまとめ / Summary <a class="header-anchor" href="#✍️-学びのまとめ-summary" aria-label="Permalink to &quot;✍️ 学びのまとめ / Summary&quot;">​</a></h2><p>Next.jsの静的生成機能は、Markdownベースのブログ構築に非常に適しています。今後は、投稿の一覧、タグ機能、英語記事の執筆にもチャレンジしていきたいと思います。</p><p>Next.js&#39;s static generation makes it perfect for blog projects. I&#39;ll continue improving the blog by adding post listings, tag support, and more English content.</p>',17)]))}const p=e(d,[["render",c]]);export{f as __pageData,p as default};
